import numpy as np

U_ocp_data = {
    "MCMB": {
        "K": 1.000052 * 1e0,
        "U": -4.894122 * 1e-1,
        "As": [
            1.115732 * 1e3,
            -1.144052 * 1e5,
            -9.895551 * 1e4,
            -8.472647 * 1e4,
            -2.676083 * 1e5,
            -4.761692 * 1e5,
            6.032508 * 1e5,
            1.867866 * 1e6,
            -1.698309 * 1e6,
            -5.707850 * 1e6,
            8.739993 * 1e5,
            7.780654 * 1e6,
            1.486486 * 1e6,
            -4.703010 * 1e6,
            -2.275145 * 1e6,
        ],
    },
    "coke": {"K": 1.291628 * 1e-1, "U": 1.596152 * 1e0, "As": []},
    "hard_carbon": {
        "K": 9.896854 * 1e-1,
        "U": 5.839445 * 1e-1,
        "As": [
            6.433323 * 1e2,
            9.277734 * 1e4,
            1.208039 * 1e5,
            3.909709 * 1e4,
            7.042733 * 1e4,
            4.527821 * 1e5,
            9.259981 * 1e5,
            1.111642 * 1e2,
            -1.853447 * 1e6,
            -3.232663 * 1e5,
            3.899277 * 1e6,
            2.862780 * 1e6,
            -2.837527 * 1e6,
            -4.199996 * 1e6,
            -1.406372 * 1e6,
        ],
    },
    "LT0": {"K": 1.291628 * 1e-1, "U": 1.596152 * 1e0, "As": []},
    "LFP": {
        "K": 3.932999 * 1e-2,
        "U": 3.407141 * 1e0,
        "As": [
            -2.244923 * 1e3,
            -2.090675 * 1e3,
            -6.045274 * 1e3,
            -6.046354 * 1e3,
            -1.395210 * 1e4,
            4.928595 * 1e4,
            5.768895 * 1e4,
            -2.706196 * 1e5,
            -2.623973 * 1e5,
            6.954912 * 1e5,
            4.805390 * 1e5,
            -8.818037 * 1e5,
            -4.500675 * 1e5,
            4.255778 * 1e5,
            1.278146 * 1e5,
        ],
    },
    "LCO": {"K": -2.369024 * 1e-4, "U": -2.276828 * 1e1, "As": []},
    "LMO": {
        "K": -9.996536 * 1e-1,
        "U": 4.004463 * 1e0,
        "As": [
            2.888073 * 1e1,
            -1.928965 * 1e4,
            2.751693 * 1e4,
            2.599759 * 1e4,
            4.795929 * 1e4,
            -2.773488 * 1e5,
            -3.211625 * 1e5,
            9.984391 * 1e5,
            1.227530 * 1e6,
            -2.722189 * 1e6,
            -1.973511 * 1e6,
            4.613775 * 1e6,
            8.188394 * 1e5,
            -4.157314 * 1e6,
            1.709075 * 1e6,
        ],
    },
    "NCA": {"K": 1.046644 * 1e-4, "U": -4.419803 * 1e0, "As": []},
    "NMC": {
        "K": -6.359610 * 1e-1,
        "U": 3.755472 * 1e0,
        "As": [
            -1.306411 * 1e3,
            -5.799521 * 1e4,
            1.285906 * 1e5,
            -1.418605 * 1e5,
            1.281969 * 1e5,
            -3.281283 * 1e5,
            8.176398 * 1e2,
            1.373879 * 1e6,
            6.511414 * 1e5,
            -7.315831 * 1e6,
            4.983891 * 1e6,
            6.925178 * 1e6,
            -6.123714 * 1e6,
            -3.595215 * 1e6,
            3.340694 * 1e6,
        ],
    },
}


def U_ocp(mat: str, x, Temp=273.15):
    F = 96485.3321233100184
    R = 8.314472
    m = U_ocp_data[mat]
    sum1 = 0
    sum2 = 0
    for k in range(len(m["As"])):
        Ak = m["As"][k]
        sum1 += Ak / F * (2 * x - 1) ** (k - 1) * (1 - 2 * (2 + k) * x * (1 - x))
        sum2 += (
            Ak
            / F
            * np.power(2 * x - 1, k)
            * (2 * (k + 1) * np.power(x, 2) - 2 * (k + 1) * x + 1)
        )

    return (
        m["U"]
        + R * Temp / F * np.log((1 - x) / x)
        + (sum1 + m["K"] * sum2) / np.power(m["K"] * (2 * x - 1) + 1, 2)
    )
